#+TITLE: Babel Config File
#+AUTHOR: Akshay Trivedi
#+DESCRIPTION: My personal emacs config

* Elisp Header Comment
#+BEGIN_SRC emacs-lisp
;;; config.el --- Initialize config -*- lexical-binding: t; -*-
;;; Commentary:
;; Generated by .emacs.d/etc/config.org
;;; Code:
#+END_SRC
* Setup Environment
** Important Variables
#+BEGIN_SRC emacs-lisp
(defconst my/config-file (expand-file-name (concat user-emacs-directory "etc/config.org")))
#+END_SRC
** Important Functions
*** open config file
#+BEGIN_SRC emacs-lisp
(defun my/open-config-file ()
  "Open this file."
  (interactive)
  (find-file my/config-file))
#+END_SRC
*** indent buffer
#+BEGIN_SRC emacs-lisp
(defun my/indent-buffer ()
  "Fix the indentation in the entire buffer."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max))))
#+END_SRC
*** kill this buffer
#+BEGIN_SRC emacs-lisp
;; REMINDER: kill-this-buffer is bronked: https://www.reddit.com/r/emacs/comments/64xb3q/killthisbuffer_sometimes_just_stops_working/
(defun my/kill-this-buffer () (interactive) (kill-buffer (current-buffer)))
#+END_SRC
** Important Macros
*** use-feature
#+BEGIN_SRC emacs-lisp
(defmacro use-feature (name &rest args)
  "Load package NAME with argument ARGS.
Like `use-package', but with `straight-use-package-by-default' disabled."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))
#+END_SRC
* Packages
** straight.el & use-package
*** bootstrap straight.el
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(eval-and-compile (require 'straight))
#+END_SRC
*** use-package
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'straight-use-package-by-default t)
(customize-set-variable 'use-package-verbose t)
(customize-set-variable 'use-package-compute-statistics t)
(straight-use-package 'use-package)
(eval-and-compile (require 'use-package))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package)
#+END_SRC
** Package List
*** no littering
#+BEGIN_SRC emacs-lisp
(use-package no-littering)
#+END_SRC
*** monokai theme
#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :hook (after-init . (lambda () (load-theme 'monokai t))))
#+END_SRC
*** simple-httpd
#+BEGIN_SRC emacs-lisp
(use-package simple-httpd)
#+END_SRC
*** autorevert
#+BEGIN_SRC emacs-lisp
(use-feature autorevert
  :config (global-auto-revert-mode t)
  :custom ((auto-revert-verbose nil)
	   (global-auto-revert-non-file-buffers t)))
#+END_SRC
*** dired
**** dired
#+BEGIN_SRC emacs-lisp
(use-feature dired)
#+END_SRC
**** dired x
#+BEGIN_SRC emacs-lisp
(use-feature dired-x
  :custom (dired-omit-verbose nil)
  :hook (dired-mode . dired-omit-mode))
#+END_SRC
**** dired collapse
#+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :hook (dired-mode . dired-collapse-mode))
#+END_SRC
*** files
#+BEGIN_SRC emacs-lisp
(use-feature files
  :custom ((backup-by-copying t)
	   (delete-old-versions t)
	   (kept-new-versions 6)
	   (kept-old-versions 2)
	   (require-final-newline t)
	   (version-control t)
	   (view-read-only t)))
#+END_SRC
*** server
#+BEGIN_SRC emacs-lisp
(use-feature server
  :config (or (server-running-p) (server-mode))
  :hook (server-switch . raise-frame)
  :defer 0.4)
#+END_SRC
*** which key
#+BEGIN_SRC emacs-lisp
(defun add-which-key-line (func dimensions)
  "Increase the height of DIMENSIONS by 1, and forward to FUNC."
  (apply func (list (cons (+ 1 (car dimensions)) (cdr dimensions)))))
(use-package which-key
  :config (which-key-mode t)
  (advice-add 'which-key--show-popup :around #'add-which-key-line)
  :custom (which-key-allow-imprecise-fit nil))
#+END_SRC
*** dum shit
**** disable mouse
#+BEGIN_SRC emacs-lisp
(use-package disable-mouse
  :config (global-disable-mouse-mode t))
#+END_SRC
**** hardcore
#+BEGIN_SRC emacs-lisp
(use-package hardcore-mode
  :bind (("C-c h" . #'help-command)
	 :map key-translation-map
	 ("C-h" . [?\C-?]))
  :config (global-hardcore-mode t))
#+END_SRC
*** ibuffer
**** ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer-other-window))
#+END_SRC
**** projectile
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-projectile
  :commands (ibuffer-projectile-set-filter-groups)
  :hook (ibuffer . ibuffer-projectile-set-filter-groups))
#+END_SRC
*** yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :hook (prog-mode . yas-minor-mode-on))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets)
#+END_SRC
*** company
#+BEGIN_SRC emacs-lisp
(defun company-mode/backend-with-yas (backend)
  (if (and (listp backend) (member 'company-yasnippet backend))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(use-package company
  :config
  (global-company-mode t)
  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  :custom ((company-idle-daly 0)
	   (company-minimum-prefix-length 1)))
#+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config (global-flycheck-mode t)
  :hook (after-init . (lambda ()
			(setq flycheck-emacs-lisp-load-path load-path))))
#+END_SRC
*** lsp
#+BEGIN_SRC emacs-lisp
(defun lsp-maybe-with-compile-commands ()
  "Run `lsp', and configure `ccls' to find compile_commands.json in the build directory if it exists."
  (let ((compile-commands-file (expand-file-name "build/compile_commands.json" (projectile-project-root))))
    (when (file-exists-p compile-commands-file)
      (setq-local lsp-clients-clangd-args `(,(concat "--compile-commands-dir=" (file-name-directory compile-commands-file))))
      (lsp))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook ((c-mode . lsp-maybe-with-compile-commands)
	 (lsp-mode . lsp-enable-which-key-integration)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :custom (lsp-ui-doc-enable nil))
#+END_SRC
*** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap ("C-c p" . projectile-command-map)
  :config (projectile-mode t)
  :defer nil)
#+END_SRC
*** magit
**** magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC
**** forge
#+BEGIN_SRC emacs-lisp
(use-package forge)
#+END_SRC
*** org
**** org
#+BEGIN_SRC emacs-lisp
(use-feature org
  :bind (("C-c a" . org-agenda)
	 ("C-c c" . org-capture)
	 ("C-c l" . org-store-link))
  :custom ((org-hide-leading-stars t)
	   (org-special-ctrl-a/e t)
	   (org-special-ctrl-k t)
	   (org-special-ctrl-o t)
	   (org-src-fontify-natively t)
	   (org-src-preserve-indentation t)
	   (org-src-strip-leading-and-trailing-blank-lines t)
	   (org-src-tab-acts-natively t)
	   (org-src-window-setup 'current-window)
	   (org-startup-indented t)
	   (org-ellipsis "…")))
#+END_SRC
**** bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :custom (org-bullets-bullet-list '("•"))
  :hook (org-mode . org-bullets-mode))
#+END_SRC
** Language Servers
*** lsp-python-ms
#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (lsp))))
#+END_SRC
* Customs
** Customize Defaults 
*** bad gui things
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'menu-bar-mode nil)
(customize-set-variable 'ring-bell-function #'ignore)
(customize-set-variable 'scroll-bar-mode nil)
(customize-set-variable 'tool-bar-mode nil)
#+END_SRC
*** electric modes
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'electric-indent-mode t)
(customize-set-variable 'electric-layout-mode t)
(customize-set-variable 'electric-pair-mode t)
#+END_SRC
*** extra functional customizations
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'auto-compression-mode t)
(customize-set-variable 'confirm-nonexistent-file-or-buffer nil)
(customize-set-variable 'indent-tabs-mode nil)
(customize-set-variable 'message-log-max t)
(customize-set-variable 'shift-select-mode nil)
#+END_SRC
*** extra visual customizations
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'column-number-mode t)
(customize-set-variable 'cursor-type 'bar)
(customize-set-variable 'global-display-line-numbers-mode t)
(customize-set-variable 'global-hl-line-mode t)
(customize-set-variable 'global-prettify-symbols-mode t)
(customize-set-variable 'show-paren-mode t)
(customize-set-variable 'truncate-lines t)
#+END_SRC
*** minibuffer
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'enable-recursive-minibuffers t)
(customize-set-variable 'resize-mini-windows t)
#+END_SRC
*** personal info
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'user-mail-address "aku24.7x3@gmail.com")
(customize-set-variable 'user-full-name "Akshay Trivedi")
#+END_SRC
** Extra Keybinds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i f") #'my/open-config-file)
(global-set-key (kbd "C-c i l") #'use-package-report)
(global-set-key (kbd "C-c e i") #'my/indent-buffer)
(global-set-key (kbd "C-c e s") #'sort-lines)
(global-set-key (kbd "C-c r d") #'diff-buffer-with-file)
(global-set-key (kbd "C-c r r") #'recover-this-file)
(global-set-key (kbd "C-x k") #'my/kill-this-buffer)
(global-set-key (kbd "C-x K") #'kill-buffer)
(global-set-key (kbd "C-x M-k") #'kill-buffer-and-window)

(global-set-key (kbd "C-z") #'undo)
(global-set-key (kbd "C-/") #'mark-whole-buffer)
#+END_SRC
** Miscs
*** yes or no prompt
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p #'y-or-n-p)
#+END_SRC
*** exec path
#+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path (expand-file-name "~/.local/bin") t)
#+END_SRC
* Elisp Footer Comment
#+BEGIN_SRC emacs-lisp
(provide 'config)
;;; config.el ends here
#+END_SRC
