#+title: My .emacs.d config
#+author: SnootierMoon
#+description: Pog

* Project Summary
This is my =.emacs.d= config file.  It contains my preferences in
several =org-src= blocks along with some notes.

I wrote the notes so that I don't have to research everything every
time I update this file.  However, I made them accessible for people
to read my config.

*NOTE: This config only works with Emacs version >27* because it
relies Emacs 27 features such as =early-init.el=.
* Getting Started
** Prerequisites
- Emacs version >27 :: If you have Emacs installed, verify that the version is >27 with =emacs --version=.

- [[https://github.com/rust-analyzer/rust-analyzer][Rust-Analyzer]] :: I mainly use Emacs for Rust development.
  The rustic package uses requires rust-analyzer
  to work properly.  I *think* it works without rust-analyzer but
  IIRC it has some annoying bugs for editing Rust files.
** Installation
*** Cloning
You can clone this repository into your =~/.config/emacs= directory:
#+begin_src bash
git clone https://github.com/SnootierMoon/.emacs.d ~/.config/emacs
#+end_src
*** Building elisp files
This config doesn't come with =init.el= or =early-init.el=.  Instead,
they are generated from =README.org= using =lisp/snoot.el=.  In order
to generate them, do:
#+begin_src bash
emacs --script ~/.config/emacs/lisp/snoot.el -f snoot/tangle-readme
#+end_src
*** Systemd (optional)
At this point, Emacs is ready.  However, you can also use =systemd= to
have Emacs run constantly in the background ([[https://emacsredux.com/blog/2020/07/16/running-emacs-with-systemd/][instructions]]).
* Code
This section contains the fun stuff.
** early-init.el
This runs before the GUI is initialized.  I disable ugly GUI features
(menu/tool/scroll bar) here so they don't popup for a few seconds at
startup.
#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el --- My Early-Init File
;;; Commentary:
;;; Code:

(add-to-list 'load-path
	     (expand-file-name "lisp" user-emacs-directory))

(require 'snoot)

(customize-set-variable 'package-enable-at-startup nil)
(fringe-mode 5)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tool-bar-mode 0)

;; load dracula-theme if it is installed
(let ((custom-theme-load-path
       (list (expand-file-name "straight/build/dracula-theme"
			       user-emacs-directory))))
  (when (locate-file "dracula-theme.el"
		     custom-theme-load-path
		     '("" "c"))
    (load-theme 'dracula t)
    (setq snoot/theme-loaded t)))

(provide 'early-init)
;;; early-init.el ends here
#+end_src
** init.el
#+begin_src emacs-lisp :tangle init.el
;;; init.el --- My Emacs Startup File
;;; Commentary:
;;; Code:

(require 'snoot)

(require 'init-packages)
(require 'init-keybinds)
(require 'init-custom)

(provide 'init)
;;; init.el ends here
#+end_src
** My Variables/Functions (snoot.el)
This file contains variables and functions that I wrote.  It contains
=snoot/tangle-readme=, which is used to generate the elisp files.
#+begin_src emacs-lisp :tangle lisp/snoot.el
;;; snoot.el --- Helpful elisp code
;;; Commentary:
;;; Code:

(require 'org)

(defconst snoot/init-org-file
  (expand-file-name "README.org" user-emacs-directory))
(defconst snoot/init-lisp-dir
  (expand-file-name "lisp" user-emacs-directory))
(defconst snoot/easy-keys
  '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?e ?r ?u ?i))

(defvar snoot/theme-loaded nil)

(defun snoot/tangle-readme ()
  "Tangle README.org and generate elisp files."
  (require 'org)
  (make-directory snoot/init-lisp-dir :parents)
  (org-babel-tangle-file snoot/init-org-file))

;; REMINDER: kill-this-buffer is bronked:
;; https://www.reddit.com/r/emacs/comments/64xb3q/killthisbuffer_sometimes_just_stops_working/
(defun snoot/kill-current-buffer ()
  "Delete the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(defun snoot/reformat-buffer (arg)
  "`indent-region' the current buffer and remove trailing whitespace.

Additionally, if ARG is non-nil, `fill-column' the buffer as
well."
  (interactive "P")
  (save-excursion
    (if (eq major-mode 'org-mode)
	(org-indent-region (point-min) (point-max))
      (indent-region (point-min) (point-max)))
    (delete-trailing-whitespace)))

(provide 'snoot)
;;; snoot.el ends here
#+end_src
** Packages (init-packages.el)
:PROPERTIES:
:header-args: :tangle lisp/init-packages.el
:END:
*** initialize
File header & bootstrap =straight.el=
#+begin_src emacs-lisp
;;; init-packages.el --- Intialize packages with straight
;;; Commentary:
;;; Code:

;; https://github.com/raxod502/straight.el#bootstrapping-straightel
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(eval-and-compile (require 'straight))

(customize-set-variable 'straight-use-package-by-default t)
(customize-set-variable 'use-package-verbose t)
(customize-set-variable 'use-package-compute-statistics t)
(straight-use-package 'use-package)
(eval-and-compile (require 'use-package))
(use-package use-package-ensure-system-package)

(require 'snoot)
#+end_src
*** no-littering
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src
*** package list
**** built-in
***** autorevert
#+begin_src emacs-lisp
(use-package autorevert
  :straight (:type built-in))
#+end_src
***** dired
#+begin_src emacs-lisp
(use-package dired-collapse
  :straight (:type built-in)
  :hook (dired-mode . dired-collapse-mode))
(use-package dired-x
  :straight (:type built-in)
  :custom (dired-omit-verbose nil)
  :hook (dired-mode . dired-omit-mode))
#+end_src
***** org
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :bind (:map org-mode-map
              ("M-j" . org-insert-heading-respect-content))
  :custom
  (org-hide-leading-stars t)
  (org-special-ctrl-a/e t)
  (org-special-ctrl-k t)
  (org-special-ctrl-o t)
  (org-src-fontify-natively t)
  (org-src-preserve-indentation t)
  (org-src-strip-leading-and-trailing-blank-lines t)
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'current-window)
  (org-startup-indented t)
  (org-ellipsis "…")
  :hook (org-mode . auto-fill-mode))

(use-package org-superstar
  :custom (org-superstar-headline-bullets-list '("•"))
  :hook (org-mode . org-superstar-mode))
#+end_src
***** files
#+begin_src emacs-lisp
(use-package files
  :straight (:type built-in)
  :custom
  (backup-by-copying t)
  (delete-old-versions t)
  (kept-new-versions 6)
  (kept-old-versions 2)
  (require-final-newline t)
  (version-control t)
  (view-read-only t))
#+end_src
***** server
#+begin_src emacs-lisp
(use-package server
  :straight nil
  :defer 0.4
  :hook (server-switch . raise-frame)
  :config (or (server-running-p) (server-mode)))
#+end_src
**** light
***** avy
#+begin_src emacs-lisp
(use-package avy
  :bind ("C-;" . avy-goto-char)
  :custom (avy-keys snoot/easy-keys))

(use-package ace-window
  :bind ("M-o" . ace-window)
  :custom
  (aw-dispatch-always t)
  (aw-keys snoot/easy-keys))
#+end_src
***** disable-mouse
#+begin_src emacs-lisp
(use-package disable-mouse
  :init (global-disable-mouse-mode t))
#+end_src
***** dracula
#+begin_src emacs-lisp
(use-package dracula-theme
  :init
  (unless snoot/theme-loaded
    (setq snoot/theme-loaded t)
    (load-theme 'dracula t)))
#+end_src
***** ibuffer
#+begin_src emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer-other-window))
#+end_src
***** powerline
#+begin_src emacs-lisp
(use-package powerline
  :init (powerline-center-theme))
#+end_src
***** which-key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :custom
  (which-key-allow-imprecise-fit nil)
  (which-key-idle-delay 0.3))
#+end_src
***** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :commands yas-reload-all
  :config (yas-reload-all)
  :hook
  (prog-mode . yas-minor-mode)
  (text-mode . yas-minor-mode))

(use-package yasnippet-snippets)
#+end_src
**** heavy
***** magit
#+begin_src emacs-lisp
(use-package forge)

(use-package magit)
#+end_src
***** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :custom (flycheck-emacs-lisp-load-path 'inherit)
  :hook (prog-mode . flycheck-mode))
#+end_src
***** projectile
#+begin_src
(use-package projectile
  :bind-keymap ("C-c p" . projectile-command-map)
  :defer nil
  :init (projectile-mode t))
#+end_src
***** company
#+begin_src emacs-lisp
(use-package company
  :custom (company-dabbrev-dowcase 0)
  :hook
  (prog-mode . company-mode)
  (text-mode . company-mode))
#+end_src
***** lsp
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :custom
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  (lsp-rust-analyzer-server-display-inlay-hints t))

(use-package lsp-ui
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil)
  :hook (lsp-mode . lsp-ui-mode))
#+end_src
***** ivy
#+begin_src emacs-lisp
(use-package ivy
  :commands ivy-mode
  :custom
  (ivy-count-format "%d/%d ")
  (ivy-extra-directories nil)
  (ivy-use-virtual-buffers t)
  :init (ivy-mode 1))

(use-package counsel
  :commands counsel-mode
  :custom
  (counsel-find-file-ignore-regexp
   "^\\(\\(.+\\/\\)*\\(\\.#.+\\|#.+#\\)\\|.+\\/build\\/.+\\)$")
  :init (counsel-mode 1))

(use-package swiper
  :commands swiper
  :bind ("C-s" . swiper))

(use-package counsel-projectile)

;; apparently order matters:
;; https://github.com/seagle0128/all-the-icons-ivy-rich#use-package
(use-package all-the-icons-ivy-rich
  :ensure t
  :custom (all-the-icons-ivy-rich-icon-size 0.8)
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :config (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  :init (ivy-rich-mode 1))
#+end_src
***** rustic
#+begin_src emacs-lisp
(use-package rustic
  :custom (rustic-format-on-save t))
#+end_src
*** footer
#+begin_src emacs-lisp
(provide 'init-packages)
;;; init-packages.el ends here
#+end_src
** Keybinds (init-keybinds.el)
#+begin_src emacs-lisp :tangle lisp/init-keybinds.el
;;; init-keybinds.el --- Enable my keybinds
;;; Commentary:
;;; Code:

(define-minor-mode hardcore-keys-mode
  "Hardcore mode"
  :global t
  :lighter " hc"
  :keymap '(([backspace] . ignore)
            ([down] . ignore)
            ([left] . ignore)
            ([return] . god-mode)
            ([right] . ignore)
            ([tab] . ignore)
            ([up] . ignore)
            ([?\C-c ?\h] . help-command))
  :after-hook
  (define-key key-translation-map [?\C-h]
    (when hardcore-keys-mode
      [?\C-?])))

(hardcore-keys-mode 1)

(global-set-key (kbd "C-c e i") #'snoot/indent-buffer)
(global-set-key (kbd "C-c e s") #'sort-lines)
(global-set-key (kbd "C-c i f")
		(lambda () (interactive) (find-file snoot/init-org-file)))
(global-set-key (kbd "C-c i l") #'use-package-report)
(global-set-key (kbd "C-c r d") #'diff-buffer-with-file)
(global-set-key (kbd "C-c r r") #'recover-this-file)
(global-set-key (kbd "C-x C-z") #'ignore)
(global-set-key (kbd "C-x K") #'kill-buffer)
(global-set-key (kbd "C-x M-k") #'kill-buffer-and-window)
(global-set-key (kbd "C-x k") #'snoot/kill-current-buffer)
(global-set-key (kbd "C-z") #'ignore)

(provide 'init-keybinds)
;;; init-keybinds.el ends here
#+end_src
** Extra Customizations (init-custom.el)
#+begin_src emacs-lisp :tangle lisp/init-custom.el
;;; init-custom.el --- Activate extra customizations
;;; Commentary:
;;; Code:

(defalias 'yes-or-no-p #'y-or-n-p)
(customize-set-variable 'cursor-type 'bar)
(customize-set-variable 'inhibit-compacting-font-caches t)
(customize-set-variable 'ring-bell-function #'ignore)
(customize-set-variable 'truncate-lines t)
(column-number-mode 1)
(global-display-line-numbers-mode 1)
(global-hl-line-mode 1)
(global-prettify-symbols-mode 1)
(show-paren-mode 1)

(electric-indent-mode 1)
(electric-layout-mode 1)
(electric-pair-mode 1)

(customize-set-variable 'confirm-nonexistent-file-or-buffer nil)
(customize-set-variable 'message-log-max t)
(customize-set-variable 'shift-select-mode nil)
(auto-compression-mode t)

(customize-set-variable 'enable-recursive-minibuffers t)
(customize-set-variable 'resize-mini-windows t)

(provide 'init-custom)
;;; init-custom.el ends here
#+end_src
